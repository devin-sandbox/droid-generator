ing one of the buttons of the buttongroup. And each
fader also sends its output to one of the main outputs of
the master.
There is one possible simpliﬁcation: Instead of using
_FUNCTION and selectat, we also could use the LED outputs of the button group directly:
[buttongroup]
button1 = B1.1
button2 = B1.2
button3 = B1.3
button4 = B1.4
led1 = L1.1
led2 = L1.2
led3 = L1.3
led4 = L1.4
[motorfader]
fader = 1
select = L1.1
output = O1
[motorfader]
fader = 1
select = L1.2
output = O2
[motorfader]
fader = 1
select = L1.3
output = O3
[motorfader]
fader = 1
select = L1.4
output = O4

DROID manual for blue-6

Notches

Pitch bend wheel

Maybe the coolest feature of the M4 is the haptic feedback. The M4 uses its motors in order to give you force
feedback. This is done in various forms.

Setting notches = 1 will convert the fader into a kind of
pitch bend wheel. It always wants to stay in the middle,
where it outputs a value of 0.5. If you move it away from
the center position, it creates a force back to the center
that is the greater the nearer you are to the top or bottom.
As soon as you release it, it snaps back to the middle.

The most useful form is to use artiﬁcal “notches” or
“dents”. Try that out be setting notches to a number, e.g.
8:

Modifying one value with two virtual faders

notches = 8

This changes the behaviour of the fader in two ways:
1. The output value is now a discrete whole number
from 0 up to 7.
2. When you move the fader you feel eight artiﬁcial
dents. That’s really hard to explain. Try it out!
These notches are super helpful especially in live performances. You instantly feel where your are. You don’t
need any visual feedback. You can very reliably set a
value without looking.
The maximum number of notches is 201. But if you select
more than 25 notches, the force feedback is turned off as
the notches would get too small to work.
There are also two other variants of force feed back:

Binary switch
If you set notches = 2, you turn the fader into a binary
switch. The output will be 0 if the fader is in the bottom
position and 1 on the top. Just move the fader away from
its position and it will immediately snap to the other side.

312

The sharing of virtual faders is a bit more tricky to explain
and you probably won’t need it. It means that you use
two motorfader circuits for controlling the same output
value. Why would you do this?
I have added that feature when building a motor fader
based MIDI control for my audio interface. I have one
mode where every of eight faders controls the main volume of one of eight voices.
And then I have a “drill down” for each voice, where the
ﬁrst fader is the main volume, the second fader the head
phone, the third the volume of an aux channel and so on.
So now I can control the volume of voice 3 either with the
third fader in the “global” volume control or with the ﬁrst
fader the drill down of voice 3. This leads to an output
collision since two circuits would try to modify the same
output, even if always just one of the two motor fader circuits is selected.
The solution to this problem is the sharewithnext input. Put the two motorfader circuits next to each other
into your patch. Put a sharewithnext = 1 into the ﬁrst
one. Don’t use the output there. Now both virtual
faders will control the output that is deﬁned in the second motorfader circuit:

Table of contents at page 2

[motorfader]
fader = 1
select = _GLOBAL
sharewithnext = 1

output = _VOLUME_3
[motorfader]
fader = 3
select = _DRILLDOWN_3

Note: if you are using notches, make sure that both
motorfader circuits have the same number of notches!

Input

Type

Default

Description

fader (f)

1 2 3

1

The number of the motor fader to use, starting with 1 for the ﬁrst fader in the ﬁrst M4. 5 selects the ﬁrst fader in the
second M4 and so on.

0.0

This sets the value the fader gets when you start this circuit this ﬁrst time or when a trigger to clear happens.

0

Number of artiﬁcal notches. 0 disables the notches. 1 creates a pitch bend wheel. 2 creates a binary switch with the
output values 0 and 1. Higher number create that number of notches. E.g. 8 creates eight notches and output will
output one of the value 0, 1, ... 8. The maximum allowed number is 25.

startvalue (sv)
notches (n)

1 2 3

When you use this input, it will override the brightness of the LED below the fader, but just when this circuit is selected.

ledvalue (lv)

And there is a special trick: When you use a negative value for ledvalue, it switches to a magical mode. Here the
LED is at full brightness when the current setting of the motorfader matches its startvalue, whereas the setting of
ledvalue is used (made positive) in all other cases.
When you use this input, it will set the color of the LED below the fader, when the circuit is selected. If the LED is off,
this setting has now impact.

ledcolor (lc)

sharewithnext (sw)

0

select (s)

1 2 3

+

selectat (sa)

1 2 3

+

preset (pr)

1 2 3

+

If set to 1, the output output will not be used but the circuit shares it’s output with the next motorfader circuit.
The select input allows you to overlay buttons and LEDs with multiple functions. If you use this input, the circuit will
process the buttons and LEDs just as if select has a positive gate signal (usually you will select this to 1). Otherwise
it won’t touch them so they can be used by another circuit. Note: even if the circuit is currently not selected, it will
nevertheless work and process all its other inputs and its outputs (those that do not deal with buttons or LEDs) in a
normal way.
This input makes the select input more ﬂexible. Here you specify at which value select should select this circuit.
E.g. if selectat is 0, the circuit will be active if select is exactly 0 instead of a positive gate signal. In some cases this
is more conventient.
This is the preset number to save or to load. Note: the ﬁrst preset has the number 0, not 1! For the whole story on
presets please refer to page 21. This circuit has 8 presets, so this number ranges from 0 to 7.

loadpreset (lp)

A trigger here loads a preset. As a speciality you can use the trigger for selecting a preset at the same time.

savepreset (sp)

A trigger here saves a preset.

DROID manual for blue-6

313

Table of contents at page 2

Input

Type

Default

Description

clear (cl)

A trigger here loads the default start state into the circuit. The presets are not affected, unless you use direct preset
switching with the preset input and without triggers. And that case the current preset is also cleared.

clearall (ca)

A trigger here loads the default start state into the circuit and into all of its presets.

dontsave (dos)

Output

0

Type

If you set this to 1, the state of the circuit will not saved to the SD card and not loaded from the SD card when the Droid
starts.

Description

output (o)

Output the current value if the virtual motor fader (don’t use this if you are using sharewithnext).

button (b)

This output provides you with the current state of the touch button below the fader, but only if the circuit is selected.
While you could do this with an extra button (see page 141) circuit, using this output is more convenient in some
situations. While the circuit is not selected, the output is set to 0.

DROID manual for blue-6

314

Table of contents at page 2

