16.31

fourstatebutton – Button switching through 4 states (OBSOLETE)

the sequence 0 → 1 → 2 → 3 → 0 octaves. The pitch is being read from I1 and output again at O1 – possibly shifted
by up to 3 octaves (3 V).

This circuit has been superseded by the
new circuit button (see page 141). button
can do all fourstatebutton can do and
much more. So fourstatebutton will be
removed soon.
This circuit converts one of the push buttons of your controllers into a button that switches through up to four different states. This is very similar to togglebutton but
that supports just two states.
The LED will be off in state 1, 100% bright in state 4 and
somewhere in between in the other two states.
The use case is to have a way to manually switch through
three or four options. The following example implements
an octave switch for a VCO. The button steps you through

Input

Type

Default

[fourstatebutton]
button = B1.1
led
= L1.1
value1 = I1 + 0V
value2 = I1 + 1V
value3 = I1 + 2V
value4 = I1 + 3V
output = O1

Of course the values need not be ﬁxed values. The next
examples shows you a
patch where the button is
used to cycle through four different wave forms of an LFO
and send that to output O1:

[lfo]
hz
= 2
square
= _W1
triangle = _W2
sawtooth = _W3
sine
= _W4
[fourstatebutton]
button
= B1.1
led
= L1.1
value1
= _W1
value2
= _W2
value3
= _W3
value4
= _W4
output
= O1

Description

button (b)

The button.

reset (r)

A positive trigger here will reset the button to the ﬁrst state.

value1 ... value4 (v)

The values that output should get when the four various states are active.

startvalue (sv)

1 2 3

By setting this to 0, 1, 2 or 3 you set the initial state of the button when the
is powered up to state 1, 2, 3 or 4.
It also disabled the automatic saving of the button’s state in the
’s internal ﬂash memory.

Output

Type

Description
Depending on the current state of the button here the value of input1, input2, input3 or input4 will be copied.

output (o)
led (l)

DROID manual for blue-6

0

1

The LED in the button

234

Table of contents at page 2

16.32

gatetool – Operate on triggers and gates, modify gatelength

This utility works with triggers, gates and
edge-triggers, can convert each type into
each other type and can change the length
of gates in ﬂexible ways.
gatetool has three different types of inputs. Usually you

would patch only one of these:
• inputgate expects a gate signal and honors the
time span during which the gate is high. It takes
into account the length of the input gate.
• inputtrigger expects triggers signals. Here the
time span during which the input is high is not relevant. Just the start of the trigger counts. If you
patch a “normal” gate signal here, the length of it
is ignored (which could be just what you wanted).
• inputedge looks for transitions between low and
high or high and low. Such transitions are called
“edge”. Each time the input level swaps is considered as a trigger. So patching a normal gate signal
here will count as a trigger when the gate goes high
and another trigger when it goes low again.
For each input gate, trigger or edge, the gatetool outputs an output gate and an output trigger and an output
edge:
• outputgate goes high on an input gate, trigger or
edge. The length of the output gate can be modiﬁed in various ways (see below).
• outputrigger outputs a short trigger of 10 ms on
an input gate, trigger or edge.
• outputedge toggles between 0 and 1 on each input
gate, trigger or edge.

Modifying the gate length
The length of the output gate on outputgate can be speciﬁed in various ways. First let’s assume that you use the
inputtrigger or the inputedge input. In this case there
is no “input gate length”. The length of the output gate is
set by gatelength, which is a number in seconds:
[gatetool]
inputtrigger = I1
outputgate = O1
gatelength = 0.5 # 500 ms

As an option, you can set the gate length in relation to a
reference clock (please see page 23 for details on using
taptempo inputs). As soon as you patch taptempo, the
gatelength parameter is in relation to one input clock
language 0.3 is just the same as 30%):
tick (in
[gatetool]
inputtrigger = I1
taptempo = I2 # some steady clock
gatelength = 0.3 # 30% of one clock tick
outputgate = O1

Note: The taptempo input has the one and only purpose
of setting a time reference to gatelength.
Now let’s assume that you have an input gate signal, that
has a speciﬁc length and you want to keep that or work
on that. For that purpose use the gateinput and the
gateoutput:
[gatetool]
inputgate = I1
outputgate = O1 # keep gate length

DROID manual for blue-6

235

This example is not very useful, though, since it just
copies the input gate to the output without changing the
gate length. Use the gatelength parameter to switch the
behaviour to that of triggerinput: the input gate length
is ignored and overruled by that parameter:
[gatetool]
inputgate = I1
outputgate = O1
gatelength = 0.5 # 500 ms

More interesting is gatestretch. This is the ﬁrst time the
length of the input gate is honored and has any relevance:
Here you specify a percentage by that the gate should be
made longer:
[gatetool]
inputgate = I1
outputgate = O1
gatestretch = 0.3 # make gate 30% longer

For obvious reasons you cannot make a gate shorter by a
percentage since nobody – not even Droid – can look into
the future...
Note: gatestretch obviously only makes sense if you
don’t use gatelength!
If you want to keep the gate length within certain
bounds, you can make use of mingatelength and
maxgatelength. They set a lower or upper limit on the
length of the output gate. They only are effective when
gatelength is not used. Both parameter are in seconds
or – if taptempo is used – in fractions of one clock tick.
The following example forwards the input gates unchanged to the output, but makes sure that the length
Table of contents at page 2

is never shorter than 10% and never longer that 90% of
a clock tick:

Building a clock divider
The edge triggers can help you building a clock divider
that divides by two. Of course you could do that with
clocktool (see page 162), as well. But this example illustrates a bit, how the edge triggers work. Consider the
following example:

[gatetool]
inputgate = I1
taptempo = I2 # steady clock
outputgate = O1
mingatelength = 0.1
maxgatelength = 0.9

[gatetool]
inputtrigger = I1
outputedge = O1

Now for every trigger in I1, the edge output changes it’s

Input

Type

Default

level. So in order to go from low to high and low again,
you need two input triggers. The output signal at O1 then
just outputs one gate signal in that time. So two triggers
are converted into one.

Use edges for pinging ﬁlters
Another application of edges is pinging ﬁlters with a zero
length impulse. Use the same patch snippet as above and
patch O1 to the input of a resonant ﬁlter. By just using the
edge, you really get exactly one ping. A trigger – regardless how short – always has two edges and thus pings the
ﬁlter twice, which can sound unclean.

Description

inputgate (ig)

Input gate. Use this if the length of the input gate is relevant.

inputtrigger (it)

Input trigger. Use this if the length of the input gate should be ignored.

inputedge (ie)

Input edge: Use this if every low/high or high/low transition should count as a trigger.

gatelength (gl)

Sets the length of the gate of outputgate in seconds. If you use taptempo the length is in fractions of a clock tick,
instead.

gatestretch (s)

0.0

Makes the output gate longer than the input gate by the given percentage. This parameter is ignored if gatelength is
used.

mingatelength (m)

0.01

Deﬁnes a minimum length of the output gate in seconds or clock ticks.

maxgatelength (x)

Deﬁnes a maximum length of the output gate in seconds or clock ticks.

taptempo (tt)

If you patch a reference clock here, gatelength, mingatelength and maxgatelength are fractions of one clock tick,
not seconds anymore. Please see page 23 for details on using taptempo inputs.

Output

Type

Description

outputgate (og)

Outputs a gate with controllable length for every gate, trigger or edge event.

outputtrigger (ot)

Outputs a 10 ms trigger for every gate, trigger or edge event.

DROID manual for blue-6

236

Table of contents at page 2

