16.33

ifequal – Check if two values are equal

This circuit is a simpliﬁed version of
compare (see page 165). It uses less memory and CPU and just checks if two values
are equal.

[ifequal]
input1 = _TRACK
input2 = 2
ifequal = _TRACK2_GATES
else = 0
output = O1

The following example shows the usage: The values of
input1 and input2 are compared. If they are equal (i.e.
if _TRACK = 2), the value speciﬁed by ifequal is output
to output, otherwise the value of else.

Input

• A comparison of a value read from an analog input
will probably never work since there is always a tiny

Default

Description

input1 (i1)

0.0

A value.

input2 (i2)

1.0

Another value

ifequal (q)

1.0

Value to be output if input1 is exactly equal to input2.

else (e)

0.0

Value to output otherwise.

Output
output (o)

DROID manual for blue-6

Type

Notes:

Type

amount of jitter and noise.
• Comparison of ﬂoating point values like 0.3 might
fail, as well, because these number can introduce
internal rounding errors.
• If you run into these issues, use compare (see page
165) instead. That circuit deals with unprecision
by introducing a allowed range for the values to be
equal.
• The main purpose of this circuit is to save a bit a
RAM and CPU in cases where you don’t use the full
feature set of compare.

Description
Here comes the result.

238

Table of contents at page 2

lfo – Low frequency oscillator (LFO)

A ﬂexible low frequency oscillator with
seven different waveforms, phase modulation, ﬂexible sync mechanisms, randomization, wave form morphing and other interesting features.

This is how the sawtooth output looks like:

0

0.2

V olts
0.4
0.6
time(sec)

0.8

1

5

0

0.2

0.4
0.6
time(sec)

0.8

1

5
0

0

0.2

0.4
0.6
time(sec)

DROID manual for blue-6

0.8

1

0.8

1

0.8

1

10
5
0

10
V olts

V olts

0

The waveforms sine and cosine are similar but are one
quarter cycle (90°) apart:

10

0.4
0.6
time(sec)

0

0.2

0.4
0.6
time(sec)

5
0

The resulting output looks like this:

0.2

Maybe the simplest waveform is square:

10

[lfo]
hz
= 4
triangle = O1

0

5

The ramp is similar but falling instead of rising:

Here is the simplest possible patch. In this example the
frequency is speciﬁed in Hertz (cycles per seconds) and
the triangle output is routed directly to O1:

5
0

V olts

Waveforms

10

10
V olts

Please note also that this LFO is not intended to be used
at audio rate. It can probably operate until roughly 10001500 Hz, but will sound ugly, distorted and with many
digital artefacts – especially the waveforms with steep
edges like square, ramp and sawtooth. If that’s exactly
what you intend, then maybe you will have fun anyway.

0

paraboloid is very similar to sine, but is constructed
based on quadratic equations (which is faster):

[lfo]
hz
= 4
sawtooth = O1

V olts

16.34

0

0.2

0.4
0.6
time(sec)

239

0.8

1

Bipolar output, Level and Offset
Please note that the LFO outputs just positive voltage
ranges until you set bipolar = on. That extends the
waveform to negative voltages (while doubling the peakto-peak voltage):
[lfo]
hz
= 4
bipolar = on
triangle = O1

Table of contents at page 2

V olts

10

Frequency control

5

The frequency of the LFO can be controlled in various
ways. In the upper examples we used the input hz. Here
you specify the frequency of the LFO directly in Hz. This
is ideal when you want to set a ﬁxed frequency with a
discrete number, rather than a control voltage. Here is
a rectangle LFO running at 1.5 cycles per second:

0
−5
−10

0

0.2

0.4
0.6
time(sec)

0.8

= 5
= 1.5V
= 2V
= O4

[lfo]
hz
rectangle

= 1.5
= O3

Hz vs BPM

A more eurorack-like way is using the rate input, which
works on a 1 V / octave scheme. One “octave” here means
that the frequency doubles. Here is an example for creating a triangle LFO running at 4 Hz, since 2 V doubles the
base frequency of 1 Hz two times (instead of 2V you could
also write 0.2):

Sometimes people ask for help converting BPM into Hz
or vice versa. And some even express their unhappyness
about the fact that the Droid uses Hz rather than BPM.
Well – that decision was made because in general I see
the LFO rather as an oscillator than as a clock. And for
oscillators Hz is the usual way to measure the speed or
frequency.

[lfo]
rate
= 2V
bipolar = on
triangle = O1

So when you use an LFO as your master clock, how can
you convert specify BPM as Hz? Simply divide your BPM
by 15 to get the correct value for hz. So 120 BPM would
be hz = 8.

The third way is to use tap tempo by sending a steady
clock into taptempo. The LFO then mimics the speed of
that input clock. This can even be combined with rate:
If you use both, then ﬁrst taptempo is being used to set
the speed and then rate is used for altering that speed.
So sending -1 V into rate will create an LFO running at
half clock speed (since -1 V pitches down the LFO by one
octave).

That sounds surprising, since Hz means oscillations per
second and BPM beats per minute. The point is: BPM
means beats per minute, not clock ticks per minute. In
a modular environment it is most common to run your
clock at 16th notes. And the “beat” in BPM refers to quarter notes. For playing one quarter note we need to play
four 16th notes, so after dividing by 60 to convert minutes into seconds, we need to multiply by 4, to convert
quarters into 16th s.

V olts

4
3
2
1
0

0

0.2

0.4
0.6
time(sec)

0.8

1

[lfo]
taptempo
rate
sawtooth

DROID manual for blue-6

[lfo]
taptempo = G1
hz = 3
sawtooth = O2

1

The inputs level and offset can be used to control the
voltage range of the outputs – which is here for your convenience and avoids the need for additional circuits for
doing this. The following example outputs a sine wave at
5 Hz to O4 that is gently oscillating between 2 V and 3.5V:
[lfo]
hz
level
offset
sine

And even hz can be used in combination. Now the speed
of the taptempo is multiplied with the value of hz. Otherwise stated: 1 Hz is the reference. The following sets
the LFO’s frequency to three times the tap tempo:

= G1 # steady clock here
= -1V # run at half clock speed
= O2

240

That – of course – assumes that your master clock is
running at 16th notes, sometimes written as 4 PPQN (4
pulses per quarter note).
Table of contents at page 2

