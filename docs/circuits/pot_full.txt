Input

Type

roundrobin (rr)

Default

Description

0

Normally when looking for a free output for playing the next note, this circuit will start from pitchoutput1 in its
search. This way, if there are not more notes than outputs at any time, the notes played ﬁrst will always be played at
the lowest numbered outputs. This leads to a deterministic behaviour when it comes to playing things like chords. The
same voice will always be used for the ﬁrst note in the stream of MIDI events.
When you switch roundrobin to 1, this changes. Now the outputs are scanned in a round-robin fashion, like in a
rotating switch. That way every output has the same chance to get a new note. Here it can even make sense to deﬁne
multiple voices even if the track is monophonic. When you use envelopes with longer release times, you can transform
such a melody into chords with simultaneous notes.
Note: When all outputs are currently used by a note, roundrobin has no inﬂuence. Here voiceallocation selects
which of the notes will be dropped.

1 2 3

voiceallocation (va)

Output
pitchoutput1 ...
pitchoutput16 (po)
gateoutput1 ...
gateoutput16 (go)

DROID manual for blue-6

Type
?

0

When from the pitch inputs, at any given time, more voice are active than you have outputs assigned, normally the
“oldest” notes would be cancelled. This behaviour can be conﬁgured here by setting voiceallocation to one of the
following values:
0

The oldest note will be cancelled (default)

1

The new note will not be played and simply be omitted

2

The lowest note will be cancelled

3

The highest note will be cancelled

Description
The pitches of up to 16 output voices.
The gates of up to 16 output voices.

328

Table of contents at page 2

16.54

pot – Helper circuit for pots

This circuit adds plenty of functionality to
the controller pots in one circuit. It helps
with various tasks. It replaces the former
circuits notchedpot and switchedpot and
these are also the main applications of pot:
the simulation a precise center dent (notch) and the sharing of one pot for several different functions.

you don’t lose to much pot resolution, but it’s still easy
enough to hit the center reliably. Here is an example:

As slope value of 0.0 does not make sense, because the
pot would stick to 0.0 all the time, a minimum value of
0.001 is enforced.

[pot]
pot
notch
output

If you are curious about the algorithm: This operation is
just xslope . So it’s not “logarithmic” or “exponential” but
polynomial.

This circuit is designed to build user interfaces. It is executed at a lower speed. Don’t use it for other purposes.

[algoquencer]
activity = _ACTIVITY
...

= P1.1
= 10%
= _ACTIVITY

Splitting the pot into two hemisperes
The jacks lefthalf, righthalf, lefthalfinv and
righthalfinv allow you to split the pot in the middle
into two ranges and use them for something completely
different. Let’s make an example:

Convert a knob to bipolar output voltage
Let’s start with some simple features. There are a couple of useful outputs, all of which you could do externally
by use of some math. The following example converts a
pot (which is ranging from 0 to 1) to a bipolar pot ranging from -1 to +1 (or -10 V to +10 V if you send it to an
output):
[pot]
pot
bipolar

= P1.1
= O1 # Send -10V ... +10V to O1

Slope
Sometimes you want a bit more resolution at the smaller
values of the pot range. Maybe the pot controls a time
from 0.0 to 1.0 seconds. And in the low range, say about
0.1 seconds, you need ﬁner control.
You can change the slope of the pot in a way that either
small values or values near 1.0 are “streched out”. The default is slope = 1.0. Look at the following diagram for
the impact of different slope values:

1

Center notch
pot can simulate a potentiometer with a notch at the cen-

ter. It helps to exactly select the center position by deﬁning a ”range of tolerance” that is considered to be the center. This range is called “notch” and is given in a percentage of the available range. I suggest using 10% so
DROID manual for blue-6

output value

Have a look into the table of jacks below about further
useful things like splitting the pot’s way in two halfs.

0.5
1.0
2.0
3.0

0.75
0.5

Now let’s start with the pot in the center position. Both
outputs will be at 0.0. If you now turn the pot to the left,
just lefthalf (at O1) is going to rise until it reaches 1.0
at the left end of the pot range. righthalf is staying at 0
all the time.
At the right half of the pot range, likewise lefthalf stays
zero and righthalf will raise from 0 to 1.
The jacks lefthalfinv and righthalfinv are similar,
but are 1.0 in the neutral position in the center and fall
to 0.0 at the edges.

0.25
0

[pot]
pot = P1.1
lefthalf = O1
righthalf = O2

0

20

40
60
pot movement(%)

329

80

100

Table of contents at page 2

Virtual pots
This circuit can handle so called “virtual pots”. This is a
situation where the physical position of the potentiometer does not match it output value. There are three situations where the pot circuit automatically switches to this
virtual mode:
• When you share (overlay) pots using the select input
• When you you enable presets (using preset or
loadpreset)
• When you send a trigger to clear
If course you can even use combinations of this: Overlay
a pot with multiple functions, work with presets and set
a start value at the same time.
If none of these three feature are used, there is not virtual
pot and the physical position always counts.
In virtual mode, the last virtual value of the pot is always
saved to the SD card and restored the next time your start
your Droid.

The LED gauge
In virtual mode the “LED gauge” is automatically activated. This displays the current virtual value of a pot using the 16 LEDs of your MASTER. If you use pot with a a
continous value, it is displayed with a “dot” that is moving from the LED of O5 (0.0) over the LEDs of I2 and I3
(0.5) to the LED of O8 (1.0). When you use discrete, values from 0 to 15 are displayed using the LEDs in the order
from left to right and from top to bottom.
If you are using a MASTER18, your master does not have
an LED matrix. But if you have at least one B32 in your
patch, the gauge is displayed using the upper 4 × 4 half
DROID manual for blue-6

of your ﬁrst B32. Without a B32 you don’t have an LED
gauge on a MASTER18.

Sharing / overlaying pots
Potentiometers are valuable ressources and sooner or
later you will run into a situation where you wish you had
more pots. So you come up with the idea of using one
pot for more than one function and switch between those
with a button.
Previously
offered the circuit switchedpot for
that task but that had certain limitations and also was not
consistent with other circuits.
Let’s make an example: Our task is to share pot P1.1 so it
sets individual release values for four different envelopes.
First we need something to switch between these four.
We do this with a buttongroup (see page 146):

[pot]
pot = P1.1
select = L1.1
output = _RELEASE1
[pot]
pot = P1.1
select = L1.2
output = _RELEASE2
[pot]
pot = P1.1
select = L1.3
output = _RELEASE3
[pot]
pot = P1.1
select = L1.4
output = _RELEASE4

Finally we can add the four envelopes:
[p2b8]
[contour]
trigger = I1
release = _RELEASE1
output = O1

[buttongroup]
button1 = B1.1
button2 = B1.2
button3 = B1.3
button4 = B1.4
led1 = L1.1
led2 = L1.2
led3 = L1.3
led4 = L1.4

[contour]
trigger = I2
release = _RELEASE2
output = O2

Now at any given time, exactly one of the four buttons
(i.e. their LEDs) is active. Now we add four pot circuits
using the same pot. The trick is the select input. Each of
these four should be selected just if one speciﬁc button
is active. The output of each is being sent to one of the
envelopes:

330

[contour]
trigger = I3
release = _RELEASE3
output = O3
[contour]
trigger = I4
release = _RELEASE4
output = O4

Table of contents at page 2

