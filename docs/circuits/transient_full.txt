[togglebutton]
button
= B1.4
led
= L1.4
output1
= _ENABLE_LOOP
output2
= _FANCY_STUFF

Input

output3
switch

= _FOO_BAR
= I1 * 2

Now if I1 is near zero volts, then the button behaves like
in the previous example. But when you set it to 5 V (re-

Type

Default

sulting in a number of 0.5 which is multiplied by 2 and
thus evaluates to 1), then a second copy of the button
is activated with its own state. The LED now shows the
state of that second button which output will outputs the
value of the ﬁrst button.

Description

button (b)

The actual push button. Usually you want to wire this to B1.1, B1.2 and so on: to one of the push buttons of your
controllers. Each time that input goes from low to high the state of the push button will toggle.

reset (r)

A positive trigger edge here will reset the button into the state “not pressed” – regardless of its current state

onvalue (ov)

1.0

Value sent to output when the push button is on. Setting this to a different value than the default value saves you
attenuating its value later on when you use it as a CV.

offvalue (fv)

0.0

Value sent to output when the push button is off.

doubleclickmode (dm)

off

This input can enable a double click mode when set to 1. In that mode the button only toggles it’s constant state if you
double press it in a short time. Otherwise it behaves like a momentary button, that inverts the persisted state (which
you toggle with the double click).
State of the push button when you switch on your system. Setting this to on or off will force the button into that state.
Using this jack disables the persistence of the state! In switched mode this will be used for the other button layers as
well.

startvalue (sv)

Output
led (l)

output (o)

Type

Description
When the button’s state is on a value of 1.0 will be sent to that output – regardless of the values in onvalue and
offvalue. Usually you will wire this jack to the LED within the button, e.g. to L1.1, L1.2 and so on
This jack will output either onvalue or offvalue depending on the state of the 1st ... 4th button. If you have not wired
those inputs then this is the same as the led output.

inverted (iv)

The same as output1, but sends onvalue when the button is off and offvalue when the button is on. Note: there is
no inverted version of output2 ... output4.

negated (n)

Similar to inverted, but always sends 1 when the button is off and 0 when the button is on – independent of the values
of onvalue and offvalue.

DROID manual for blue-6

368

Table of contents at page 2

16.70

transient – Transient generator

This circuit creates (possibly very slow) linear transients from a deﬁned start value to
an end value. The duration of that transition is either set in seconds or speciﬁed as
a number of clock ticks. This circuit is built
in a way that very long transients are possible, even several days, weeks, months, years or whatever you like.
Here is a simple example:
[transient]
start = 1V
end = 3V
duration = 600
output = O1

Here the duration is meant to be 600 seconds (10 minutes). So at the beginning O1 will be at 1 V. Then it rises
slowly until after ten minutes it reaches 3 V. There it stays
forever.
There are two ways of restarting it again. Either you send
a trigger to reset or you set loop to 1. When loop is active, the transient will start over at start immediately
when it reaches end:
[transient]
start = 1V
end = 3V
duration = 600
output = O1
reset = G1
loop = 1

As an alternative to seconds you can specify the length
in terms of clock ticks. This needs a steady clock signal
patched into the clock input.
DROID manual for blue-6

From this follows:

[transient]
start = 0.2
end = 0.7
duration = 32
clock = I1
output = O1

Here the duration of one transient is exactly 32 clock
ticks. This makes it simpler to exactly align a transient
with a musical structure of a song or the like.

Changes while in the air
As start, end and duration are CV inputs, they might
change while the transient is running. This is how
transient behaves in such situations:
The start value is just taken into account whenever the
transient starts. this is:

• When you make the duration longer in-ﬂight, the
speed of change will get slower.
• When you change start in-ﬂight, nothing happens.
• When you change end in-ﬂight to a value that is
“farther” away from the current level, the speed of
change increases.
• If you change end to be the current level of the transient, it seems to stop, but in fact the slope is just
zero and it still lasts until the duration is over.
• The output level is always smooth. No sudden
steps. With one exception: When the transient resets to its start value.
In pingpong mode (see the table of inputs for details) this
changes accordingly. While the transient is on its way
back, consider start and end exchanged.

• When the
starts
• When there is a trigger at reset
• When the transient reaches the end and loop is on.
Whenever that happens, the current output level is set to
start. Also the output phase is set to 0. Phase is a kind of
internal clock that measures which part of the transient
has been run through already.
At any given time transient assumes that the phase
times the duration equals the time left. And the distance
to go in the remaining time is the current distance from
the current output level to the end. These two values directly translate into a slope. This slope now determines
how fast the output level is moving and into which direction.

369

Table of contents at page 2

Input

Type

Default

Description

start (st)

0.0

Start value of the transient

end (e)

1.0

Target value of the transient

duration (d)

1.0

Duration: if the clock input is used, it is in clock ticks. Otherwise it is in seconds. A negative duration will be treated
as zero. And a zero duration will make the output always be at end level.

loop (lo)

0

If this is set to 1, the transient will start over again as soon as it reaches the end.

pingpong (pp)

0

If this set to 1, the transient will start moving backwards towards the start when it has reached end. It will swing back
and forth, in fact looping inﬁnitely.

freeze (f)

0

while this is set to 1, the transient it frozen at its current position.

reset (r)

A trigger here will immediately set the transient back to its start value.

clock (c)

If you patch a clock here, the duration will be set in terms of clock ticks, not of seconds. This needs to be a steady clock
in order to get predictable results.

Output

Type

Description

output (o)

Here comes the current value of the transient.

phase (p)

This output reﬂects the current phase of the transient. It behaves as if start would be 0 and end would be 1.

endoftransient (et)

When loop and pingpong is off, this output goes to 1 when the transient has reached the end – and stays there. In loop
mode just a short trigger is sent. In pingpong mode that trigger is not sent when the transient has reach the end-value,
but when it is back at start (i.e. after one full cycle).

DROID manual for blue-6

370

Table of contents at page 2

