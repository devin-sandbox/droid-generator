Input

Type

activesensing (as)

Default

Description

1

This is a switch that disables or enables active sensing. This is a MIDI feature where a MIDI sender emits one message
of the type “active sensing” every 300 ms. The receiver can use this in order to detect if the connection is still active
and also immediately reset (und turn all sound off) if it is not. Active sensing is enabled per default. You can disable it
here by setting activesensing = 0.
Note: If you have more than one midiout circuit sending to the same port, you should activate activesensing just
for one of them in order to avoid useless duplicate MIDI events.

updaterate (ur)

50.0

Speciﬁes the maximum rate at which continuous controllers like the CCs, volume, pitchbend and channelpressure
are updated. This limitation is necessary in order not to ﬂood the MIDI interface with too many updates because of
just minimal changes. This rate is speciﬁed in update per second and the default is 50. A zero or negative value will
completely stop all updates.
Note: depending on how many events are happening on your channel, fewer updates might be possible. MIDI over a
classical cable is limited to 3125 bytes per second. Events typically need 1, 2 or 3 bytes each.

select (s)

1 2 3

+

selectat (sa)

1 2 3

+

DROID manual for blue-6

The select input allows you to overlay buttons and LEDs with multiple functions. If you use this input, the circuit will
process the buttons and LEDs just as if select has a positive gate signal (usually you will select this to 1). Otherwise
it won’t touch them so they can be used by another circuit. Note: even if the circuit is currently not selected, it will
nevertheless work and process all its other inputs and its outputs (those that do not deal with buttons or LEDs) in a
normal way.
This input makes the select input more ﬂexible. Here you specify at which value select should select this circuit.
E.g. if selectat is 0, the circuit will be active if select is exactly 0 instead of a positive gate signal. In some cases this
is more conventient.

276

Table of contents at page 2

16.41

midithrough – Forward MIDI events from input to one or more outputs

Use this circuit to forward MIDI data from
input ports to output ports. You can get
events from one TRS and one USB port and
forward to multiple TRS and multiple USB
ports (if you have an X7).
You specify the source and target of the events with the
four parameter fromusb, fromtrs, tousb and totrs.
The number of USB and TRS (3.5 mm tip ring sleeve jack)
ports depends on you hardware conﬁguration. Here is
how your ports are numbered:
MASTER + X7:
usb = 1

USB port on the X7

trs = 1

TRS port on the X7

MASTER18 + X7:
usb = 1

USB port on the MASTER18

usb = 2

USB port on the X7

trs = 1

TRS port MIDI1 on the MASTER18

trs = 2

TRS port MIDI2 on the MASTER18

trs = 3

TRS port on the X7

In addition there is port auto detection and broadcast.
If you specify fromusb = 10 or fromtrs = 10, the ﬁrst
port that actually sends events is used as input – until the
data stops for a second or more. If this is the case, auto
detection is redone and another port might be the lucky
one.
Setting tousb = 10 or totrs = 10 forwards the events
to all ports of the given type.

MASTER18:
usb = 1

USB port on the MASTER18

trs = 1

TRS port MIDI1 on the MASTER18

trs = 2

TRS port MIDI2 on the MASTER18

Forward MIDI events from the second TRS port to all USB
and TRS ports:
[midithrough]
fromtrs = 1
totrs = 10 # all TRS ports
tousb = 10 # all USB ports

Note: All midiin (see page 260), midiout (see page 268)
and other midithrough circuits still work. When multiple circuits send events to the same port, the events are
merged – as long as the output speed of MID allows for all
the events.
By using midiout and midithrough with the same output
port, you cat thus “splice in” MIDI events to an existing
stream.

Examples
Forward MIDI events from the ﬁrst USB port to the second TRS port:
[midithrough]
fromusb = 1
totrs = 2

Forward MIDI events from the ﬁrst active TRS port to the
ﬁrst TRS output:

DROID manual for blue-6

[midithrough]
fromtrs = 10 # auto detect
totrs = 1

277

Notes:
• As of now, Sysex messages are not forwarded.
Sorry for that. If that’s becoming important we
might add this feature.
• If you forward from USB to TRS make sure that you
do not send more than 3125 bytes per second. TRS
cannot output faster. It’s limited by the MIDI standard. If you send MIDI data faster, some events will
get lost.

Table of contents at page 2

Input

Type

Default

fromtrs (ft)

1 2 3

+

fromusb (fu)

1 2 3

+

totrs (tt)

1 2 3

tousb (tu)

1 2 3

DROID manual for blue-6

+
+

Description
Selects a TRS port to use as input (3.5 mm jack). fromtrs = 0 disables TRS, fromtrs = 10 enables auto detection.
See the manual of midiin for details on port selection.
Selects a USB port to use as input. fromusb = 0 disables USB, fromusb = 10 enables auto detection. See the manual
of midiin for details on port selection.
Selects which TRS MIDI port to output to. See the manual of midiout for details on port selection.
Selects which USB MIDI port to output to. See the manual of midiout for details on port selection.

278

Table of contents at page 2

