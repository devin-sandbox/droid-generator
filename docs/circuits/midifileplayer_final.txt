Polyphonic tracks
MIDI streams and ﬁles consist of note on and note off
events. So there is no length parameter in a note. It just
contains the note number (in semitones) and a velocity.
If the track contains situations where a new note starts
while another one is still on, the track is polyphonic, as
you need more than one synth voice to play correctly.
The MIDI ﬁle player allows you to deﬁne up to eight voices
for playing notes. Each voice consists of a pitchX and
a gateX output (and an optional velocityX output).
By patching these outputs the player knows how many
voices are available.
If the number of simultaneous notes exceeds the number
of attached voices, some notes have to be cut off or completely omitted. You can ﬂexibly change the behaviour
in such a situation. See the description of the parameter
dropnotes for details.
Here is an example for playing with up to three voices:
[midifileplayer]
file = 2
track = 1
pitch1 = O1
pitch2 = O2
pitch3 = O3
gate1 = G1
gate2 = G2
gate3 = G3

Speed and Clocking
A MIDI ﬁle contains absolute timing information of when
to exactly play which note. For that purpose every note
event in the ﬁle has a relative time stamp, measured in
DROID manual for blue-6

ticks. The player honors this information and plays the
tracks exactly in their original speed... unless... you
change it of course.
To do so you have two options. The ﬁrst one is the speed
parameter. At 1.0 you get the original playing speed. 0.5
will play at half the speed and 2.0 at the double speed.
This can be mapped to a pot, of course (here I chose a
range from 0 to 2):
[midifileplayer]
pitch = O1
gate = O2
speed = P1.1 * 2

Other controls and parameters
MIDI ﬁles may contain information about pitch bend, a
global volume (CC 7), the mod wheel (CC 1) and velocity
(per note). These are all available as CV outputs. See the
table of outputs for details. Most other CCs are currently
not available since they are very rarely used in MIDI ﬁles.
Future versions of the MIDI ﬁle player might give access
to these.

Error handling

Turning the pot totally CCW will completely freeze the
playback.
If you need the internal clock of the MIDI player in order to
synchronize with the rest of your patch, you can get two
clocks running at different resolutions at the two outputs
clockout and midiclock. See their descriptions below
for details.
The second option is clocking the player externally. In
that case the tempo information from the MIDI ﬁle is ignored. External clocking allows you to synchronize the
MIDI playback with the rest of your patch, which may
contain additional sequencers and stuff. Patch your external clock into the clock input. Each clock will then play
a 16th note’s time equivalent of content:

When working with ﬁles, errors can happen. The MIDI ﬁle
might be missing, corrupted, whatever. In order to make
life easier for you, the MIDI ﬁle player can show you an
error status at the output error. Write the error to an R
register that is free, that will make one of the LEDs lit up
and show an error color.
The following patch shows the errors at the LED of input
1:
[midifileplayer]
pitch = O1
gate = O2
error = R1

Please see the table of outputs below for the various errors and their color codes.

[midifileplayer]
pitch = O1
gate = O2
clock = G1

Note: this does not mean that the notes are quantized to
16th notes. You still have the complete resolution.
254

Table of contents at page 2

Input

Type

Default

Description

file (f)

1 2 3

1

Number of the MIDI ﬁle to play. 7 will select midi7.mid.

track (tc)

1 2 3

1

Number of the track in the ﬁle to play, starting at 1. Empty tracks do not count. Any number smaller than 1 will be
interpreted as one. If the number is too big, the last track in the ﬁle is played.

clock (c)

Patch an external clock here and the MIDI ﬁle will be played according to that clock. In order to be modular-friendly,
this is not a MIDI clock but one counting the sixteenth, which is typically the step resolution of analog sequencers.
This clock is then internally multiplied in order to create the necessary resolution. Note: The input speed has no effect
when using an external clock.

reset (r)

A trigger here sets the play back position to the start.

loop (lo)

end (e)

1

1 2 3

speed (sp)

channel (ch)

+
1.0

1 2 3

tuningmode (tm)

+

When loop mode is active (set to 1), the track will start over again immediately when it has reached its end. This is the
default. Otherwise playback stops at the end of the track.
If you set this value, it deﬁnes the playing end of the track. This is set in quarters as counted from the start. Setting
the end beyond the end of the track will insert some pause.
Change the relative speed of the playback with this setting. At 1 the speed is unchanged. 1.5 makes the speed 50%
faster, 0.5 plays at half speed. At 0 the playing is completely frozen. Note: speed is being ignored when using the
input clock.
Only execute / play commands from a certain MIDI channel. There are 16 MIDI channels. It ranges from 1 to 16.

off

If set to 1, all pitch outputs will go to the CV selected for tuningpitch (which defaults to 2 V), and all gate outputs will
play gates at 120 BPM. This helps getting all attached voices tuned when working with many voices.

tuningpitch (tp)

1V
Oct

2V

This pitch CV will be output while the tuning mode is active.

transpose (tr)

1V
Oct

0V

Transposes all output pitches by this value by adding the value. So in order to transpose one octave down, set this
input to -1V or -0.1. Changes in the transposition are immediately reﬂected, even for currently already active notes.

0

If this is set to 1, the velocity output for a voice will not be affected by note off events. It’s just altered at the beginning
of new notes. The velocity is kept after the note ends. This way during the release phase of an envelope triggered by
the gate, the original velocity still lasts on. In most cases the note off velocity is set to 0, which would immediately cut
off the release phase when the velocity is patched into a VCA.

1
6V

Sets the value to the desired maximum that pitchbend should output, and likewise it’s negative counterpart at its
2
minimum value. At the middle position it always outputs 0. This defaults to 12
V, which corresponds to one whole
tone. Note: setting this to a negative value is allowed and will invert pitch bend.

1

When set to 1 (which is the default), the pitch bend will directly be applied to all output pitches. Alternatively you can
set it to 0 and use the output pitchbend, for using it elsewhere.

holdvelocity (hv)

pitchbendrange (pbr)

bendpitch (bp)

DROID manual for blue-6

1V
Oct

255

Table of contents at page 2

Input

Type

roundrobin (rr)

Default

Description

0

Normally when looking for a free output for playing the next note, this circuit will start from output1 in its search. This
way, if there are not more notes than outputs at any time, the notes played ﬁrst will always be played at the lowest
numbered outputs. This leads to a deterministic behaviour when it comes to playing things like chords. The same
voice will always be used for the ﬁrst note in the stream of MIDI events.
When you switch roundrobin to 1, this changes. Now the outputs are scanned in a round-robin fashion, like in a
rotating switch. That way every output has the same chance to get a new note. Here it can even make sense to deﬁne
multiple voices even if the track is monophonic. When you use envelopes with longer release times, you can transform
such a melody into chords with simultaneous notes.
Note: When all outputs are currently used by a note, roundrobin has no inﬂuence. Here voiceallocation selects
which of the notes will be dropped.

voiceallocation (va)

1 2 3

notegap (ngp)

0

0.0

When the MIDI stream, at any given time, needs to play more notes than you have voices assigned, normally the
“oldest” notes would be cancelled. This behaviour can be conﬁgured here by setting voiceallocation to one of the
following values:
0

The oldest note will be cancelled (default)

1

The new note will not be played and simply be omitted

2

The lowest note will be cancelled

3

The highest note will be cancelled

When your MIDI devices plays a note so “long” that it lasts exactly until the next note begins – or if due to a lack of
used pitch outputs one currently played note has to be replaced with a new one, the gate output will have no time to
go low for a sufﬁcient time between the two notes. In effect it won’t trigger any envelope for the new note but will
play “legato”.
If you don’t like this, you can use notegap. This input speciﬁes a number of milliseconds that the gate will be forced
down before the new note begins. This has the drawback of introducing some latency, of course! So I suggest that you
start with notegap = 1 and then check out if your envelope is fast enough to trigger. If not, increase the value.
If you are using
’s own contour circuit or trigger something else internally in your patch, you can use notegap
= 0.1. That is sufﬁcient and introduces barely any latency. A value of 0.0 keeps the default of the legato mode.
Note: the notegap parameter does not affect the trigger outputs.

ccnumber1 ... ccnumber4
(cn)

DROID manual for blue-6

1 2 3

0

You can listen to up to four CCs (control changes). For example if you are interested in the current value of CC#17, set
ccnumber1 = 17 and use the output cc1 for getting the value of CC 17.
256

Table of contents at page 2

