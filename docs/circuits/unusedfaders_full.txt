Input

Type

Description
When you patch this input, the trigger delay runs in clocked mode. In this mode delay is relative to one clock cycle.
I.e. a delay if 0.5 will delay the trigger by half a clock cycle. The same holds for gatelength. That is measured in clock
cycles, too.

clock (c)

Output

Default

Type

Description

output (o)

Outputs the delayed triggers/gates, while keeping the gate length – unless you have changed that

overflow (ov)

Whenever there are more input triggers than this circuit can keep memory of, this output outputs a gate of 0.5 sec
length. You can wire this to an LED in order to know when this happens.

DROID manual for blue-6

372

Table of contents at page 2

16.72

unusedfaders – Declare unused motor faders

The circuit disables motor faders that are
not used in certain situations. Those faders
move to the bottom and stay there. Otherwise faders, that are currently not selected, would keep their old position and
LED state. This can be confusing to the user.

Usage: If you have a situation where not all of the faders
are selected with an active select, add a unusedfaders
circuit for the ununsed faders and make sure that they are
selected.
The following example disables the faders 6, 7 and 8 while
_MENU_ACTIVE is 1:

Input

Type

Default

Description

firstfader (f)

1 2 3

1

The number of the ﬁrst unused motor fader motor.

numfaders (n)

1 2 3

1

The number of unused faders

select (s)

1 2 3

+

selectat (sa)

1 2 3

+

DROID manual for blue-6

[unusedfaders]
select = _MENU_ACTIVE
firstfader = 6
numfaders = 3

Note: You could do the same with faderbank, but that
circuit needs more memory.

The select input allows you to overlay buttons and LEDs with multiple functions. If you use this input, the circuit will
process the buttons and LEDs just as if select has a positive gate signal (usually you will select this to 1). Otherwise
it won’t touch them so they can be used by another circuit. Note: even if the circuit is currently not selected, it will
nevertheless work and process all its other inputs and its outputs (those that do not deal with buttons or LEDs) in a
normal way.
This input makes the select input more ﬂexible. Here you specify at which value select should select this circuit.
E.g. if selectat is 0, the circuit will be active if select is exactly 0 instead of a positive gate signal. In some cases this
is more conventient.

373

Table of contents at page 2

16.73

vcotuner – measure frequency and tuning of a VCO

The MASTER18 has a builtin probe that can
measure the frequency of incoming signals
with high precision. This circuit uses this
probe to measure the pitch of basic waveforms, such as triangle, since, sawtooth
and square. With this you can build a tuner and a pitch
follower.
To use the circuit, plug any signal with a basic waveform
in the I1 input of your MASTER18. This input can measure the frequency of positive zero crossings, which is is
the number of times the signal goes from below zero volt
to above zero volts, per second. For basic waveforms this
is the same as the frequency of the signal itself. The frequency range you can measure is in the range 1 Hz to
20 kHz. The low end allows you to measure clocks.
Notes:
• The tuner does not work well for complex waves,
such as frequency modulated waves or the result
of complex wave table synthesis.
• This circuit does not exist on the MASTER.

Building a tuner
Included in the circuit is a comparator that checks how
far the frequency is away from the nearest semitone or a
reference note that you choose. You can display this deviation in various ways to build a tuning device.
The following patch example uses the three button-LEDs
of a P2B8 to show the current tuning:
[p2b8]

DROID manual for blue-6

[vcotuner]
ledsharp = L1.1
ledintune = L1.3
ledflat = L1.5

[e4]
[vcotuner]
tuningnote = 0
cents = _CENTS
ledintune = L1.1

If you plug a signal into I1, the circuit shows you how
good its frequency matches that of the nearest semitone.
• When the frequency is close enough, LED 3 is lit.
• When the frequency is too low, LED 1 is lit.
• When the frequency is too high, LED 5 is lit.
Close enough here means that the measured note is
within ± 3 cents of the nearest semitone. 100 cents
correlates to the pitch difference of one semitone, so
the largest possible distance to the nearest semitone is
50 cents. You can reduce this to 2 cents with precision
= 2, if you like.
There is no display for showing the semitone the tuner
locked in. So if you are not sure you got the right note,
you can set a tuning note, like for example C. This is done
with the input tuningnote. A value of 0 selects C (C♯ is
1, D is 2 and so on). The following example tunes to the
nearest C with a precision of 2 cents:
[vcotuner]
ledsharp = L1.1
ledintune = L1.3
ledflat = L1.5
tuningnote = 0 # any C
precision = 2 # 2 cents max deviation

[encoder]
encoder = 1
override = _CENTS / 50
rangemode = 1 # bipolar
negativecolor = 0.8 # red

The encoder-LEDs can display a value in the range -1 … 1.
You might change the 50 in override = _CENTS / 50 if
you want the display to be more “zoomed in” or “zoomed
out”.

Pitch follower
The vcotuner can give you the measured frequency as a
1V/Octave value at the output pitch. You can then patch
this output to a second VCO, to make it track the pitch of
the ﬁrst one:
[vcotuner]
pitch = O1 # patch to 2nd VCO

Hereby it is assumed that the frequency of A1 is 440 Hz
and 0 V corresponds to a C0. You can change both with
the settings concertpitch and basepitch (see below).

If you are lucky enough to own an E4 controller (see page
70), you can use the LED ring of an encoder to display the
current tuning. Here is an example:

374

Table of contents at page 2

