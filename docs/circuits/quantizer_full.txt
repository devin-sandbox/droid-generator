Virtual pots
This circuit can handle so called “virtual pots”. This is a
situation where the physical position of the potentiometer does not match it output value. There are three situations where the pot circuit automatically switches to this
virtual mode:
• When you share (overlay) pots using the select input
• When you you enable presets (using preset or
loadpreset)
• When you send a trigger to clear
If course you can even use combinations of this: Overlay
a pot with multiple functions, work with presets and set
a start value at the same time.
If none of these three feature are used, there is not virtual
pot and the physical position always counts.
In virtual mode, the last virtual value of the pot is always
saved to the SD card and restored the next time your start
your Droid.

The LED gauge
In virtual mode the “LED gauge” is automatically activated. This displays the current virtual value of a pot using the 16 LEDs of your MASTER. If you use pot with a a
continous value, it is displayed with a “dot” that is moving from the LED of O5 (0.0) over the LEDs of I2 and I3
(0.5) to the LED of O8 (1.0). When you use discrete, values from 0 to 15 are displayed using the LEDs in the order
from left to right and from top to bottom.
If you are using a MASTER18, your master does not have
an LED matrix. But if you have at least one B32 in your
patch, the gauge is displayed using the upper 4 × 4 half
DROID manual for blue-6

of your ﬁrst B32. Without a B32 you don’t have an LED
gauge on a MASTER18.

Sharing / overlaying pots
Potentiometers are valuable ressources and sooner or
later you will run into a situation where you wish you had
more pots. So you come up with the idea of using one
pot for more than one function and switch between those
with a button.
Previously
offered the circuit switchedpot for
that task but that had certain limitations and also was not
consistent with other circuits.
Let’s make an example: Our task is to share pot P1.1 so it
sets individual release values for four different envelopes.
First we need something to switch between these four.
We do this with a buttongroup (see page 146):

[pot]
pot = P1.1
select = L1.1
output = _RELEASE1
[pot]
pot = P1.1
select = L1.2
output = _RELEASE2
[pot]
pot = P1.1
select = L1.3
output = _RELEASE3
[pot]
pot = P1.1
select = L1.4
output = _RELEASE4

Finally we can add the four envelopes:
[p2b8]
[contour]
trigger = I1
release = _RELEASE1
output = O1

[buttongroup]
button1 = B1.1
button2 = B1.2
button3 = B1.3
button4 = B1.4
led1 = L1.1
led2 = L1.2
led3 = L1.3
led4 = L1.4

[contour]
trigger = I2
release = _RELEASE2
output = O2

Now at any given time, exactly one of the four buttons
(i.e. their LEDs) is active. Now we add four pot circuits
using the same pot. The trick is the select input. Each of
these four should be selected just if one speciﬁc button
is active. The output of each is being sent to one of the
envelopes:

330

[contour]
trigger = I3
release = _RELEASE3
output = O3
[contour]
trigger = I4
release = _RELEASE4
output = O4

Table of contents at page 2

Now you can switch between the four envelopes with the
buttons and use the pot to adjust the release time of the
selected envelope.
Hints:
• Don’t mix up B1.1 and L1.1. If you would use B1.1
for the switching, you would need to hold the button down while turning the knob. In which case you
wouldn’t need the buttongroup circuit.
• It is supported (and maybe useful) to select several
of the ”virtual” pots at the same time. In such a situation the turning of the real knob will adjust all of
the selected values at the same time.
• Pots are no motorized faders. So they cannot show
the current value correctly after switching. See below for details.
• In certain cases the selectat input might come
handy: if you do the switching with one number
that changes, not a bunch of gate signals. See the
jack table below for details.

Working with presets
The pot circuit supports up to 16 presets. With the use
of the preset input you can select one of these. Set a
number from 0 to 15 there to switch between presets. A
change of that number immediately switches to another
preset.
As an alternative you can work in a triggered mode
by patching loadpreset and savepreset in addition.
Switching presets happens just on these triggers. In triggered mode it’s like have one more preset: the current
“working” position of the pot.
On page 21 there is a whole chapter about presets. You
ﬁnd examples and more hints there.

DROID manual for blue-6

Using a start value
A trigger to clear will set the virtual position of the
pot to a deﬁned start value (which you can adapt with
startvalue). This means that now the physical postion
of the pot is not anymore identical with the virtual position. For that reason the pot runs in virtual mode as soon
as you connect the clear input.
In virtual mode the state of the virtual pot is saved to the
SD card, the pickup procedure (as described below) is applied and the LED gauge is active per default (MASTER
only).

Picking up the pots
When you use overlaying, presets or a start value, your
pots run in virtual mode. It means that the physical value
of the pot might not be identical with its output value.
As an example let’s assume that – using the upper example with overlaying – you ﬁrst press B1.1 and set decay
fully CW 1.0. Now you select B1.2. Because 0.5 is the
start position of every virtual pot that is the current value
of the second virtual pot. But the physical pot is at 1.0.
This is solved in the following way:
• If you turn the physical pot right, the value of the
virtual pot is always increased until both reach 1.0
at the same time.
• If the physical pot is already at 1.0 when you select
a virtual pot, it cannot be increased further. You
ﬁrst have to turn the pot left a bit and then right
again.
• If you turn the physical pot left, then the value of
the virtual pot is always decreased until both reach
0.0 at the same time.

331

• If the physical pot is already at 0.0 when you select
a virtual pot, it cannot be decreased further. You
ﬁrst have to turn the pot right and then left again.
If you really want even more details – here we go: Let’s
assume that the virtual pot is at 0.4 when you select it.
And let’s further assume that the physical pot is at position 0.8. When you turn it left, the physical pot has a
way of 0.8 to go until 0.0 and the virtual just 0.4. So
the virtual pot is moving with half of the speed, for both
to reach 0.0 at the same time. When you turn the pot
right, the virtual pot has 0.6 to go until maximum, while
the physical pot has just 0.2 left until it reaches its maximum. So now the virtual pot moves three times faster
than the physical.
This algorithm is different than the common “picking up”
of pots that you see in Eurorack land quite a lot in such
situations. I preferred my solution because it seems to
be more convenient – especially if you want to change a
value a little bit. Also it allows to have multiple virtual
pots to be selected at the same time without having their
values immediately snap to the same value.
By the way: it is also possible to select none of the pots.
Which is a convenient way to reset the physical pot to
the middle position so that you always have headroom
for movement left and right, before selecting one of the
virtual pots.

Pot circuits doing math
Here is an important caveat for all you hardcore hackers
out there: The pot circuit is designed to interface with
real pots that real users turn. While you can misuse a pot
circuit for doing some basic math, don’t do this. Rather
have a look at math (see page 248) and compare (see page
165).

Table of contents at page 2

Why? In order to optimize the execution speed of your
patch, several user interface circuits are executed at just
12.5% of the normal speed. This saves valuable time for
the execution of more time critical circuits. So instead of
checking pots at sub-millisecond intervals, your master
rather spends its time in executing your sequencers with
a timing as precise as possible.
This means, that pot, button, buttongroup and similar
circuits are executed just every 8th loop cycle.
If you experience any trouble with this “UI slowdown”,
you can disable it by using a droid (see page 183) circuit:
[droid]
uislowdown = 0

DROID manual for blue-6

332

Table of contents at page 2

