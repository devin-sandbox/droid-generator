16.7

buttongroup – Connected buttons

This utility circuit combines a number of
push buttons into a group that behave as
a unit. One classic operation is to form a
group of “radio buttons”. This means that
at any time just one of these buttons is on
and all others are off.
This circuit is designed to build user interfaces. It is executed at a lower speed. Don’t use it for other purposes.
The following example uses four buttons for selecting
one of the voltages 0 V, 1V, 2V and -1V. This voltage is
then being sent to the output jack. This could be used
as an octave switch or the like. The four buttons B2.1
... B2.4 are grouped in a way that just one button is on
and the others are off. The four selectable voltages are
assigned to one button each. The value of the currently
active button is being sent to the output. The outputs
output1 ... output4 will be set to 1 if their corresponding button is active and are used for controlling the LEDs
within the buttons.
[buttongroup]
button1
= B2.1
button2
= B2.2
button3
= B2.3
button4
= B2.4
led1
= L2.1 # LED in button 2.1
led2
= L2.2
led3
= L2.3
led4
= L2.4
value1
= 0V
value2
= 1V
value3
= 2V
value4
= -1V
output
= O1

than one button can be active at the same time. If this
is the case then the sum of the values of all active buttons will be sent to the output. Here is an example, where
three buttons are being used for selecting a number between 0 and 7 by selecting any combination of the buttons “1”, “2”, and “4”.
[buttongroup]
button1
= B2.1
button2
= B2.2
button3
= B2.3
led1
= L2.1 # LED in button 2.1
led2
= L2.2
led3
= L2.3
value1
= 1
value2
= 2
value3
= 4
minactive = 0 # allow all buttons to be off
maxactive = 3 # allow all buttons to be on
output
= O1

Overlaying buttons
When you make more complex
patches, it’s likely
that you might run out of buttons. In such a situation you
can overlay buttons with multiple functions and use other
buttons to switch between these layers.
Consider the following example: We have one P2B8 controller. The buttons 1 and 2 should switch between the
layers root note and scale. We do this with a simple button group (you could also use a button circuit and save
one button, but for simplicity we allow us two here):

[p2b8]
[buttongroup]
button1 = B1.1
button2 = B1.2
led1
= L1.1
led2
= L1.2

The remaining six buttons select either one of six possible
root notes or one of six possible scales (adhering to the
scheme of the minifonion circuit, see page 279). Please
note how we have added a select input at each of both
circuits to make sure that at any given time exactly one
of the two groups is selected:
[buttongroup]
select = L1.1 # be active only when L1.1 is active
button1 = B1.3
button2 = B1.4
button3 = B1.5
button4 = B1.6
button5 = B1.7
button6 = B1.8
led1 = L1.3
led2 = L1.4
led3 = L1.5
led4 = L1.6
led5 = L1.7
led6 = L1.8
value1 = 0 # C
value2 = 2 # D
value3 = 5 # F
value4 = 7 # G
value5 = 9 # A
value6 = 10 # Bb
output = _ROOT

If you set maxactive to a number greater than one, more
DROID manual for blue-6

146

Table of contents at page 2

[buttongroup]
led4 = L1.6
select = L1.2 # be active only when L1.2 is active led5 = L1.7
button1 = B1.3
led6 = L1.8
button2 = B1.4
value1 = 1 # major
button3 = B1.5
value2 = 6 # dorian minor
button4 = B1.6
value3 = 7 # natural minor
button5 = B1.7
value4 = 9 # phrygian minor
button6 = B1.8
value5 = 10 # diminished scale
led1 = L1.3
value6 = 2 # mixolydian
led2 = L1.4
output = _DEGREE
led3 = L1.5

Here you can patch _ROOT and _SCALE to some
minifonion, arpeggio or other circuit that works with
scales.
Now, with the top buttons you can switch between root
and scale selection and with the remaining six buttons select either the root or the scale.

Input

Type

Default

Description

minactive (ma)

1 2 3

1

Minimum number of active buttons. If you set this to 2, then it is guaranteed that at least 2 buttons are active. If you
set this to 0, then it is possible to switch off all buttons. The output will be set to 0.0 in that case.

maxactive (xa)

1 2 3

1

Maximum number of active buttons. It is an error to set this to 0, since this would make this circuit useless.

1.5

The number of seconds after which a button press is considered as a long press.

longpresstime (lt)

1st ... 32nd button of the group. Any positive trigger seen here will toggle this button. And another button might go
on or off in order to make sure that the number of active buttons is withing the allowed range.

button1 ... button32 (b)

value1 ... value32 (v)

startbutton (sb)

1 2 3

+

Value that will be sent to the output if the 1st ... 32nd button is active. These inputs default to 0 for value1, 1 for
value2 and so on and 31 for value32.

1

If you set this parameter to the number of a button, that button will be selected (and all other deselected) at the start
when no state is loaded or at a trigger to clear. This allows you to set useful default values for your button groups.
Note: this only makes sense if maxactive is not 0.
if minactive = 0, you also can set startbutton = 0. Then a clear will clear all buttons.
If you set startbutton = -1, the maximum number of allowed buttons will be set. This is useful in situations where
maxactive is greater than 1. If maxactive is less than the number of buttons, the selected buttons are ﬁlled from the
start.

select (s)

DROID manual for blue-6

1 2 3

+

The select input allows you to overlay buttons and LEDs with multiple functions. If you use this input, the circuit will
process the buttons and LEDs just as if select has a positive gate signal (usually you will select this to 1). Otherwise
it won’t touch them so they can be used by another circuit. Note: even if the circuit is currently not selected, it will
nevertheless work and process all its other inputs and its outputs (those that do not deal with buttons or LEDs) in a
normal way.

147

Table of contents at page 2

Input

Type

Default

selectat (sa)

1 2 3

+

preset (pr)

1 2 3

+

Description
This input makes the select input more ﬂexible. Here you specify at which value select should select this circuit.
E.g. if selectat is 0, the circuit will be active if select is exactly 0 instead of a positive gate signal. In some cases this
is more conventient.
This is the preset number to save or to load. Note: the ﬁrst preset has the number 0, not 1! For the whole story on
presets please refer to page 21. This circuit has 16 presets, so this number ranges from 0 to 15.

loadpreset (lp)

A trigger here loads a preset. As a speciality you can use the trigger for selecting a preset at the same time.

savepreset (sp)

A trigger here saves a preset.

clear (cl)

A trigger here loads the default start state into the circuit. The presets are not affected, unless you use direct preset
switching with the preset input and without triggers. And that case the current preset is also cleared.

clearall (ca)

A trigger here loads the default start state into the circuit and into all of its presets.

dontsave (dos)

Output

0

Type

If you set this to 1, the state of the circuit will not saved to the SD card and not loaded from the SD card when the Droid
starts.

Description

led1 ... led32 (l)

This output will be on / 1.0, whenever the 1st ... 32nd button is active and off / 0.0 otherwise. Wire this to the LED in
the button. If you have wired select, these LED outputs will do nothing (not even send 0) unless this circuit is selected.

buttonoutput1 ...
buttonoutput32 (bo)

These are individual outputs for every button in the group. They output button’s value when it is active, otherwise 0.
If valueX is not deﬁned for buttonX, the value 1 is output (not the button’s number!).
Note: in contrast to the led output, these outputs are not affected by select but always functional.
One application of these outputs is to use a buttongroup with maxactive = X and minactive = 0 as a cheap bunch
of X toggle buttons in one single circuit and still use select.

output (o)

The sum of the values of all active buttons will be sent here. if no button is active, 0.0 is being output.

buttonpress (bp)

Emits a trigger if any button is being pressed

longpress (lop)

Emits a trigger, when any button is pressed for at least 1.5 seconds. If this jack is used, buttonpress will emit a signal if
the button in question is released before the 1.5 seconds, not immediately. This way you trigger either at buttonpress
or at longpress, not at both.

selectionchanged (sc)

Emits a trigger when the selection of the buttons has changed. This is not quite the same as buttonpress, since a button press might not lead to a change. Also in multi button situations (e.g. maxactive = 4 where you have 7 buttons)
the change is delayed up to 25 ms due to detection of bursts of quasi simultanous presses.

DROID manual for blue-6

148

Table of contents at page 2

Output
extrapress (ep)

DROID manual for blue-6

Type

Description
Emits a trigger, when one of the buttons was pressed but the selection has not changed. This can be used to build
clever interfaces like in the Motor Fader Performance Sequencer, where a press on the already selected track toggles
the current page.

149

Table of contents at page 2

16.8

calibrator – VCO Calibrator

This circuit allows you to precisely compensate for decalibrated or otherwise imperfectly tracking VCOs – which is probably a property of all existing analog VCOs
to some degree. It does this by applying
one speciﬁc adaptation value per individual octave. This
way you can make even those VCO track well over 10 octaves, that would normally only do 2 or 3.
The calibration of the error compensation is done manually – by you. At ﬁrst this may seem like a disadvantage. In practice, however, this is much easier and more
accurate than the way some “autotune” modules do it.
Those modules have an additional input for “listening” to
a waveform output of the oscillator and measure and adjust the tracking at a button press.
The advantages of manual tuning are:
• You don’t need an extra waveform output of your
VCO.
• You can calibrate sound sources with complex
wave forms, whose pitch is are hard to grab by autotune devices.
• You can change the correction at any time during a
live performance without your audience noticing.
• It’s possible to make one VCO follow the (imperfect) tracking of a second one, in order to create
perfect FM sounds while just one VCO needs to be
adapted.
• It’s also possible to ﬁx the tracking of unprecise
pitch CV generators, such as sequencers, quantizers or MIDI interfaces.
The calibrator circuit happily proﬁts from the
’s
highly precise, linear and low-jitter ADCs and DACs. And
using eight such circuits one
could ﬁx the tuning

DROID manual for blue-6

of up to eight VCOs.

and try to minimize the audible beatings.

How to use
Here is a typical patch for the use of the calibrator:
[calibrator]
input
= I1
output
= O1
nudgeup
= B1.1
nudgedown = B1.3
ledup
= L1.1
leddown
= L1.3

As second way of using the VCO calibrator is specifying a tuning adjustment for each octave by a ﬁxed number (or a potentiometer if you can afford). This is done
with the inputs tune0 ... tune8 and tunelowtail and
tunehightail.A value of 1.0 means an upwards tuning
of one semitone (100 cents) per octave, and -1.0 likewise
downwards.

Persistence

The original pitch information from the sequencer, quantizer, MIDI converter or whatever comes into I1. The
adapted pitch goes to O1 and from there to the V/Oct input of your VCO. Of course the pitch information could
also come from some internal circuit like the minifonion
(page 279). In that case input is connected to an internal
patch cable coming from that circuit.
Now with the two buttons B1.1 and B1.3 you can adjust
the tuning up and down at any time while playing. Each
button press just very slightly shifts the pitch up or down.
The adjustment is only done for the octave that’s currently playing. calibrator saves one calibration value
for each octave from 0 to 8 and also one for the pitches
below 0 V and those above 8 V. Your tuning proﬁle is automatically saved to the memory card.
Pressing both buttons at the same time resets the calibration of the current octave.
For a good result I suggest either using a precise tuner or
playing the voice at the same time as a reference voice
150

As always, the internal state of the calibrator circuit
is automatically saved to your SD card and loaded when
starts.
your
But what if you are using several calibrators, each for
a different (and differently tracking) VCO? How do you
know which of the saved calibration states is applied to
which VCO?
The answer to this is: all calibrators in your patch are
enumerated starting from 1. For each of them there is
one conﬁguration saved to the SD card, based on that
number. So when you modify the calibration of the third
calibrator circuit in your patch, the modiﬁed conﬁguration will be saved as belonging to calibrator number 3.
So if you make sure that each VCO is always handled by
the same calibrator circuit you will always get the right
conﬁguration.
If you for example remove the ﬁrst calibrator from your
patch, the second one will become the new ﬁrst one and
load its calibration state when you load the new patch. If
you don’t want that to happen, simply keep the calibra-

Table of contents at page 2

