Perfect VCO calibration

[button]
button = B1.1
led = L1.1

If you really want to eliminate all beatings in your chords
while using analog VCOs, you probably need something
to correct tracking deviations. Here I strongly recommend using the circuit calibrator (see page 150). Here
is an example with three voices, where buttons of a P2B8
are used for ﬁne tuning the VCO tracking in each octave:

[quantizer]
input = P1.1
steps = 1 # 1 step per octave
output = _TUNINGPITCH
[superjust]
input1 = I1
input2 = I2
input3 = I3
output1 = O1
output2 = O2
output3 = O3
tuningmode = L1.1
tuningpitch = _TUNINGPITCH

[superjust]
input1 = I1
input2 = I2
input3 = I3
output1 = _O1
output2 = _O2
output3 = _O3

input1 ... input8 (i)

Type
1V
Oct

tuningmode (tm)

tuningpitch (tp)

1V
Oct

bypass (b)
transpose (tr)

Output
output1 ... output8 (o)

DROID manual for blue-6

1V
Oct

Type
1V
Oct

[calibrator]
input = _O2
output = O2
nudgeup = B1.2
nudgedown = B1.4
[calibrator]
input = _O3
output = O3
nudgeup = B1.5
nudgedown = B1.7

The number of pitch inputs and pitch outputs you patch
should be identical.

[calibrator]

Input

input = _O1
output = O1
nudgeup = B1.1
nudgedown = B1.3

Default

Description

+

1st ... 8th pitch input

0

While this is 1, all outputs output the value set by tuningpitch. This is for tuning all outputs. Since perfect tuning is
crucial for perfect intonation, this is quite useful.

0V

This pitch CV will be output while the tuning mode is active.

0

While this is 1, all inputs are passed through to the outputs without changes.

0V

This value is being added to all outputs, but not in tuning or bypass mode. It can e.g. be used for making a vibrato on
a chord.

Description
1st ... 8th pitch output

360

Table of contents at page 2

16.66

switch – Adressable/clockable switch

This circuit supports a set of various
switching operations. It can switch several inputs to one output either by means
of addressing the input via CV or by stepping forward and backward. You can do the
same vice versa: connecting one input to one of several
outputs while setting the inactive outputs to 0 V.

[switch]
input = I1
output1 = O1
output2 = O2
output3 = O3
output4 = O4
forward = I8

You can even use several inputs and outputs at the same
time and thus create an n × m switch with the option of
rotating the outputs against the inputs by means of addressing or stepping.

Now, if you try this out, you might notice that a trigger
to forward moves the selected output backwards! This
is no bug but very logical. The reason will get more clear
if we build a switch with several inputs and outputs. Let’s
make a 3×3 switch:

At minimum you need to patch two inputs and one output (or vice versa), plus a switch like forward, backward
or offset.
The ﬁrst example switches four inputs I1 ... I4 to one
output O1 be means of a trigger at forward. At the beginning I1 is wired to O1. Each time a trigger is seen at
forward the switch switches to the next input and at the
end starts over at I1 again. So it cycles through I1 → I2
→ I3 → I4 → I1:
[switch]
input1 = I1
input2 = I2
input3 = I3
input4 = I4
output = O1
forward = I8

Please note, that output and output1 are synonyms
here. You can use either way you like. Just the same is
input just a shorthand for input1.
Now Let’s do the opposite thing: distribute one input to
four different outputs:
DROID manual for blue-6

output2 = O2
offset = I7

[switch]
input1 = I1
input2 = I2
input3 = I3
output1 = O1
output2 = O2
output3 = O3
forward = I8

Using two inputs and two outputs creates a switch that
can swap these two. Here with offset 0 input1 is connected to output1 and input2 to output2. If offset is
1, input1 will be connected to output2 and input2 to
output1.
[switch]
input1 = I1
input2 = I2
output1 = O1
output2 = O2
offset = I7

Now let’s make another example for a CV addressable
switch. The CV is read from I7. At a voltage of 0 V
output1 is connected to input1, at 1 V to input2, at 2 V
to input3, at 3 V to input4, at 4 V to input1 again, at 5 V
to input2 and so on:

Now a trigger to forward moves each output forward to
the next input. That is the same as saying each input
moves backward to the previous output. Of course you
can change the direction by using backward instead of
forward.
Instead of moving the switch with a trigger you also can
address it by using a CV at the input offset. In this example we use a steady CV being either 0 (for selecting O1) or
1 (10 V) for selecting O2:
[switch]
input
= I1
output1 = O1

361

[switch]
input1 = I1
input2 = I2
input3 = I3
input4 = I4
output1 = O1
offset = I7 * 10 # 1 V per switch step

Generally speaking, if you connect less inputs than outputs, the unconnected inputs are regarded as getting a
0 V input. If you connect less outputs then inputs, the unconnected outputs send their values into the black horrible void.
Table of contents at page 2

Input

Type

input1 ... input16 (i)

Default

Description

0.0

1st ... 16th input. Use these inputs in order and don’t leave gaps.

forward (f)

If a trigger or gate is received here, the switch adds one to the current internal switch offset. So every output moves
to the next input and every input moves to the previous output.

backward (b)

Similar then forward, but switches backwards

reset (r)

Resets the switch to its initial position. Assuming offset is at 0, input1 is connected to output1, input2 to output2
etc.
If reset and a trigger at forward / backward happen at the same time (within 5 ms), the reset will win and the switch
is being reset to offset 0. This avoids problems with unprecise timing of external sequencers.

offset (of)

1 2 3

Output

Type

output1 ... output16 (o)

DROID manual for blue-6

0

This allows CV addressable switching. The number read here is being used a shifting offset and is always added to
the internal offset. For example if you send 5 here, it is like you have triggered forward ﬁve times after the last reset.
Please note, then 5 would mean 50 Volts, not 5 Volts. So if you patch an external CV like I1 here, you probably want
to multiply with some useful number.

Description
1st ... 16th output. Use these outputs in order and don’t leave gaps.

362

Table of contents at page 2

