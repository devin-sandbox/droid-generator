Input

Type

Default

selectat (sa)

1 2 3

+

DROID manual for blue-6

Description
This input makes the select input more ﬂexible. Here you specify at which value select should select this circuit.
E.g. if selectat is 0, the circuit will be active if select is exactly 0 instead of a positive gate signal. In some cases this
is more conventient.

230

Table of contents at page 2

16.29

flipflop – Simple ﬂip ﬂop

This circuit implements a ﬂip ﬂop that
stores one bit, which can be manipulated
with various triggers.

[flipflop]
toggle
output

Here is a simple example for a ﬂip ﬂop that
toggles at each trigger. Fun fact: this implements a clock divider by two:

As an alternative you can work with set and reset triggers:

Input

Type

Default

[flipflop]
set = I1
reset = I2
output = O1

= I1
= O1

Note: The ﬂip ﬂop does not save its state to the SD card.
And it has no presets. If you need any of these, have a
look at button (see page 141).

Description

toggle (t)

A trigger here inverts the state of the ﬂip ﬂop. It changes 0 to 1 and 1 to 0.

set (s)

Sets the ﬂip ﬂop to 1.

reset (r)

Sets the ﬂip ﬂop to 0.

clear (cl)

Sets the ﬂip ﬂop to the value deﬁned by startvalue.

startvalue (sv)

0

Loads the value into the ﬂip ﬂop that’s deﬁned with loadvalue.

load (ld)
loadvalue (lv)

Output
output (o)

DROID manual for blue-6

The ﬂip ﬂop starts its live with this value. Also clear will set the ﬂip ﬂop to this value.

1

Type

Value to set the ﬂip ﬂop to, when load is triggered.

Description
Outputs the current value of the ﬂip ﬂop: either 0 or 1.

231

Table of contents at page 2

16.30

fold – CV folder – keep (pitch) CV within certain bounds

This circuit can keep an incoming CV within
deﬁned bounds, but not by limiting to
these bounds, but by folding it in case it exceeds these bounds.
The main application is keeping the pitch of
a voice within a certain range by octaving it up and down
when necessary. Octaving keeps the actual note value.
Here is an example for that application:
[fold]
input = I1
output = O1
foldby = 1V # one octave
minimum = 1.2V
maximum = 2.5V

If the input value at I1 is going below 1.2 V, 1 V will be
added over and over until the output voltage is at least
1.2 V. So the upper example will convert as follows:
• 0.7 V → 1.7 V
• 2.0 V → 2.0 V
• -4.3 V → 1.7 V
• 4.4 V → 2.4 V
If you apply that to a bass voice, you make sure that it
never goes to low or too high, which is helpful if that voice
is the result of a combination of sequences, random numbers, transpositions and other funny generative ideas.
Note: If you do not specify minimum or maximum, no folding will take place at that boundary. If you specify neither
of them, this circuit is completely useless.

Anomalies

because they can be CVs of course. Try the following
patch and send the output O1 to the pitch input of a voice:

Two anomalies can happen if the parameters are a bit
“crazy”. This ﬁrst one happens, when the space between
minimum and maximum is less than one foldby. Consider
the following example:

[lfo]
hz = 2 * P1.1
triangle = _CV

[fold]
input = I1
output = O1
foldby = 1V
minimum = 1.1V
maximum = 1.3V

[lfo]
hz = 2 * P1.2
triangle = _MIN

Now if the input voltage is e.g. 1.0 V, it will be folded up
to 2.0 V, which is then above the maximum range. But
it will stay there, since there is no way to fold it into the
range anyway.
The second anomaly is if minimum is greater than
maximum. Look:

[lfo]
hz = 2 * P2.1
triangle = _MAX
[lfo]
hz = 2 * P2.2
triangle = _FOLDBY
level = 2V
[fold]
input = _CV
minimum = _MIN
maximum = _MAX
foldby = _FOLDBY
output = O1

[fold]
input = I1
output = O1
foldby = 1V
minimum = 2.5V
maximum = 1.5V

Here any voltage below 2.5 V will be folded up until it is
above that value. so 2.4 V will be folded to 3.4 V. Well,
you could also argue that because 2.4 V is also above the
maximum value it should get folded down instead. While
that is true, fold behaves asymmetrical here and gives
folding up the precedence.
But why would you set such strange parameters? Well,

DROID manual for blue-6

[p2b8]
[p2b8]

232

[lfo]
rate = O1 * 0.2
hz = 110
output = O2

Here all four inputs are from slowly running LFOs and
funny things happen. Play with the four pots and you will
get all sorts of very interesting random patterns.

Table of contents at page 2

