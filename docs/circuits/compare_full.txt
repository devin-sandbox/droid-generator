Input

Type

Default

Description

clock (c)

Patch a steady clock here for this circuit to be of any use

reset (r)

A trigger here resets the internal counters. This is useful if you use the clock divider and want to restart the internal
counting from 0, in order to align the clock divider with some external sequencers or the like

divide (d)

1 2 3

1

Number to divide the clock through. This will be rounded to the nearest integer number. Note: if you want to use an
external CV then you need to multiply that with some useful number, since otherwise you will get a number between
0 and 1 which is not useful at all. Remember: 10 V translates to a number of 1.

multiply (m)

1 2 3

1

Number to multiply the clock with. Same considerations hold as for divide.

dutycycle (dc)

0 0.5 1

+

gatelength (gl)

+

delay (dl)

0.0

Output duty cycle of the clock – which is essentially a square wave – in a range from 0.0 to 1.0 or 0% to 100%. If you
don’t patch anything here, the length of the trigger output pulses will be 10 ms (
’s standard trigger duration).
This jack is alternative to dutycycle and will override it if it is used. It sets the length of each output pulse to a ﬁxed
value that is independent of the incoming clock. A value of 0.5 (a CV of 5 volts) translates into a gate length of 0.5
seconds.
This CV allows you to shift the input clock beat around in time. A value of 0.1 will delay each beat by 10% of a clock
cycle. A value of -0.1 is also allowed and shifts the beat 10% ahead.
For an unmodulated delay -0.1 and 0.9 is just the same, because the output clock will have the same relation to the
input clock. But if you modify the delay from 0.0 to 0.9, the next tick will be delayed by 90% of one cycle, where is a
modiﬁcation from 0.0 to -0.1 will play the next tick by 10% earlier.

Output

Type

Description

output (o)

Here comes the modiﬁed clock

inputpitch (ip)

Experimental output that outputs a representation of the input clock’s pitch on a 1V/octave base, based on the reference of 60 BPM (1 Hz). This means that an input clock of 120 BPM will output 1V (a value of 0.1), since 120 BPM it is
one octave higher than 60 BPM. If you feed that value to the rate input of an LFO you get that running at exactly the
same speed (not in the same phase, however).

outputpitch (op)

Same for the modiﬁed output clock

DROID manual for blue-6

164

Table of contents at page 2

16.12

compare – Compare two values

This simple utility circuit allows you to
make a decision by comparing an input
value (at input) against a reference value
(at compare) and output one of three values depending on whether the input is less
than, greater than or equal to the reference.

[compare]
input = B1.1
compare = 1
ifequal = 4
else = 8
output = O1

The following simple example checks if the pot P1.1 is
left of the center (a value less than 0.5). If that is so, it
outputs 1, otherwise 0.

Now while you hold the button B1.1 this circuit will output the value 4 and otherwise 8.

[compare]
input = P1.1
compare = 0.5
ifless = 1
output = O1

You can change the default output value of 0 with the input else. That speciﬁes what happens if the condition
is not met. The following example outputs -1, if P1.1 is
greater or equal to 0.5.
[compare]
input = P1.1
compare = 0.5
ifless = 1
else = -1
output = O1

Equality, analog unprecision
You can also check if two values are equal. This is done
with ifequal. Check this out:

DROID manual for blue-6

Now the inputs I1 and I2 are being treated as equal as
long as their difference is 0.1 (1 V) at most.

Makeing a three-way switch

Note: equality can be tricky when it comes to values from
analog things like inputs or potentiometers. They always
undergo tiny random ﬂuctiations. So the following example, that should compare the current voltages of two
inputs, will never really work:
[compare]
input = I1
compare = I2
ifequal = 1 # will never happen!
output = O1 # This won't work!

If you try this out, you will probably never get both inputs equal. Even a single electron too much could theoretically make the difference. So in order to make such
comparisons possible, there is a way to allow for a slight
unprecision when doing the comparison. This is set with
the precision parameter:

It is possible to check all three relations at once. Make
sure that you apply a precision if you deal with analog
values:
[compare]
input = I1
compare = I2
precision = 0.1
ifless = 0
ifequal = 1
ifgreater = 2
output = O1

Now you get 0, 1 or 2, depending on wether I1 is less,
equal or greater than I2.
Note: Better do not use just ifless and ifgreater without using ifequal or else. This lets the equality undeﬁned and will output 0 if for any chance the two input
values are equal. Better use ifless / ifgreater in combination with else if you are not interested in the exact
equality.

Omitted inputs

[compare]
input = I1
compare = I2
precision = 0.1
ifequal = 1
output = O1

It is allowed to omit any of the inputs ifless, ifequal,
ifgreater or else. Any of these is treated as 0 with one
exception: If you omit all four, ifequal defaults to 1.
This make a super basic compare circuit just check if two
values are equal:
165

Table of contents at page 2

Dynamic output values

input = B1.1
compare = 0
output = O1

This will output 1 if button B1.1 as the value 0 (is not
pressed).

sine = _SINE
square = _SQUARE

As often, instead of using ﬁxed values for ifless,
ifequal, ifgreater and else you can use dynamic values from somewhere else, of course. The following example will output a sine wave at O1 if the pot is left of the
center or else a square wave:

[compare]
input = P1.1
compare = 0.5
ifless = _SINE
else = _SQUARE
output = O1

[lfo]
hz = 2

Input

Type

Default

Description

input (i)

0.0

A value to compare.

compare (c)

0.0

A reference value to compare the input with.

ifequal (q)

+
+
+

else (e)

0.0

Speciﬁes the output value in case non of the stated conditions are met.

precision (pc)

0.0

An optional precision to be used by ifequal

ifgreater (g)
ifless (l)

Output
output (o)

DROID manual for blue-6

Type

Value to be output if input is greater than compare. If you patch nothing here, the value of the input else will be used.
Value to be output if input is less than compare. If you patch nothing here, the value of the input else will be used.
Value to be output if input is equal to compare within the precision deﬁned by precision. If you patch nothing here,
the value of the input else will be used.

Description
Here one of ifgreater, ifless or ifequal is output.

166

Table of contents at page 2

contour – Contour generator

An enhanced version of the classic ADSRenvelope generator with the six phases
predelay, attack, hold, decay, sustain and
release.
For triggering there are two alternative inputs: gate and trigger. Use trigger if you are not interested in the length of the gate signal. There will be no
decay / sustain phase in that case.
The minimal patch just connects gate or trigger and
the output. It creates an envelope with standard timings,
triggered at I1 and output to O1:
[contour]
gate
= I1
output = O1

Assigning pots to the classic four inputs lets you use the
just as a normal ADSR envelope:
[p2b8]
[p2b8]
[contour]
gate
= I1
attack = P1.1
decay
= P1.2
sustain = P2.1
release = P2.2
output = O1

When you try this out, you will notice that the time range
of the attack parameter is much shorter than that of
1
decay and release. If fact it is just 20
of these. This
has been chosen in this way because I believe that this

DROID manual for blue-6

makes sense from a musical point of view. Very long attack times are quite unusual and I wanted to be able to
directly map the four values to pots. But if you don’t like
that you can – of course – make all three timing parameters have the same range simply by multiplying attack by
20:

P
A
H
D
S
R

10
V olts

16.13

5

0
[p2b8]
[p2b8]

0

[contour]
gate
= I1
attack = P1.1 * 20
decay
= P1.2
sustain = P2.1
release = P2.2
output = O1

If you do not change the shape parameter, the duration
of the attack phase is 0.1 sec at a value of 1. The phases
decay and release have a duration of 2.0 sec at a value of
1.

The Phases
In addition to the traditional ADSR phases this circuit also
has a an optional predelay (P) phase – which acts like a delay before the envelope starts – and an optional hold (H)
phase which keeps the envelope at maximum level for a
short time right after attack and before decay.
The following diagram shows an example envelope with
all six phases. The gate starts at 0 ms and ends at 200 ms.

50

100

150
200
time(ms)

250

300

Attack, Decay and Release
The phases attack, decay, release are phases where the
level of the envelope starts at one level and then approaches another level within a certain time. In the upper example all these phases had a linear characteristic.
That means that the output voltage changes by a constant amount per time.
’s contour allows you to control the shape of
these phases in order to get them bent in either direction. For that purpose there are the inputs attackshape,
decayshape and releaseshape.
Let’s take decay as an example. During the decay phase
the envelopes voltage falls from the maximum level of
10 V (you can change this with the input level) to the
sustain level deﬁned by the input sustain. For simplicity let’s assume that you have not used these inputs, so
the maximum level is 10 V (1.0) and the sustain level is
5 V (0.5). Also we assume attack, predelay and hold to
be 0.0.
When decayshape is not patched or otherwise set to its

167

Table of contents at page 2

default of 0.5, the shape of the decay curve is linear. This
means that it goes down by the same voltage each second
until it reaches 0.5.

= I1
= P1.1
= O1

5

0

5
0
0

50

100

150
200
time(ms)

250

300

If the shape gets a value less than 0.5, the curve is bent
into the opposite direction (some call this logarithmic
but mathematically this is not true). Here is an example
where decayshape is set to 0.0:
D
S
R

10
0

50

100

150
200
time(ms)

250

300

Now, if you set decayshape to 1.0, the curve is completely exponential:

Such an envelope sounds completely different – of course
also depending on whether you feed this into a linear
VCA, exponential VCA or a VCF. For ﬁne control you can
use any number between 1.0 and 0.5 of course. In that
case you will get a curve that is bent to a certain degree.
Assigning decayshape to a pot helps you listening to the
different sounds:

V olts

V olts

V olts

D
S
R

10

[contour]
gate
decayshape
output

D
S
R

10

5

0
0

Input
gate (g)

trigger (t)

Type

Default

+

50

100

150
200
time(ms)

250

300

Description
Patch a gate signal here that triggers the envelope. Gate means that the length of the signal is relevant. While the gate
is high the sustain phase holds on. As soon as gate is going low the release phase is being entered.
This is an alternative method of starting the envelope. If you use trigger instead of gate, there are the following
differences:
• The duration of the trigger signal is being ignored.
• There is no decay / sustain phase. Attack and hold are immediately followed by release. The inputs sustain and
decay have no impact anymore.
• The predelay and attack phases are continued until their end even when the trigger signal ends (When using
gate and the gate signal ends during predelay, the envelope does not start. When it ends during attack, decay /
sustain are being skipped and release starts at the current level of the envelope. That way short gates can result
in “quieter” envelopes).

DROID manual for blue-6

168

Table of contents at page 2

Input

Type

Default

Description

retrigger (rt)

1

If you patch 0 or off here, a gate or trigger impulse will not immediately restart the envelope unless it already has
reached its release phase. The default on, which means that a trigger will immediately restart the envelope in any
case.

startfromzero (sz)

0

If you set this to 1 or on, a trigger or gate will reset the envelope’s current level immediately to zero. This is sometimes
called “digital mode”. In the normal analog mode the envelope resumes from where it is. This means that when a
trigger occurs right in the release phase where the level is still high, will start it’s attack not from zero but from this
hight value.

abortattack (aa)

0

This is an on / off setting that decides what happens if the input gate goes off while the predelay or attack phase is
still not ﬁnished. Per default that phase will be ﬁnalized regardless of the gate state. If abortattack is on, the end of
the gate will immediately stop the attack phase and move on to hold. Note: In this case the value of the envelope will
not reach the maximum level. If the gate ends during the predelay phase, no envelope will be started at all.
Note: This setting is only functional when the gate input is being used for triggering the envelope. If you use trigger,
the attack phase is always completely executed and this setting has no inﬂuence.

loop (lo)

0

This is an on / off input that switches loop on or off. When loop is on, the envelope will immediately start again once
it has ﬁnished. It also starts without triggering. This converts contour into a kind of fancy LFO.
gate / trigger and loop can be combined. Any gate or trigger will restart the envelope just as usual – even in loop

mode.
predelay (pd)

0.0

The predelay phase inserts a delay between the incoming gate and the begin of the envelope. The length of the predelay
is 0.1 seconds per volt, so a value of 1.0 means 1 second

attack (a)

0.0

Length of the attack phase, i.e. the time from the beginning of the gate until the maximum level is reached. See the
general description for information about the scaling of this input.

hold (h)

0.0

If this is none-zero, the envelopes lingers a certain amount of time at its maximum level after the attack and before
the decay phase. The input value speciﬁes a number of seconds. A value of 0.5 (this is 5 V) will create a hold time of
0.5 seconds.

decay (d)

0.2

Time of the decay phase

sustain (s)

0

1

0.5

Sustain level

swell (sw)

0

1

0.0

If this jack is set to a value greater than 0.0, the level of the envelope will go up or down again during the sustain phase
until it reaches swelllevel.

swelltime (st)

5.0

Time of the swell phase

swelllevel (sl)

1.0

Level the swell phase is approaching. Setting this to the same as sustain effectively disables swell.

DROID manual for blue-6

169

Table of contents at page 2

Input

Default

Description

release (r)

0.2

Timing of the release phase

level (l)

1.0

Maximum level and scaling of the envelope. It is basically an output attenuator of the envelope. Sudden changes in
the level will immediately have an (audible) impact on the envelope.

1.0

energy of the attack: The velocity is similar to the level, but is effective just during the attack phase. During that
phase that maximum voltage that is read from the velocity jack and will be used as the velocity of the envelope.
Further changes during the other phases will be ignored. This makes it ideal of using with a sequencer. For example
you can patch an accent output here and add some offset. Sudden changes in this input will not affect the shape of the
envelope.

0V

This is a one volt per octave input affecting all timings of the envelope. When you set this to 0 (the default), it is neutral.
A value of 0.1 (1 Volt) will exactly double the speed of all phases - just as one octave up doubles the frequency of an
oscillator. This jack can be used to easily implement envelopes where the length very naturally follows this pitch - just
like on a piano, glockenspiel or marimba lower notes last longer than higher ones.

velocity (v)

pitch (p)

Type

0

1

1V
Oct

Tap tempo is an alternative method of specifying a pitch information. When you patch a clock to tap tempo, all time
parameters in the envelope are relative to that clock. If the clock speeds up, the envelope gets faster and vice versa.
The reference speed is 120 BPM. This means that if you patch a 120 BPM clock here, nothing changes. Clocks faster
than 120 BPM will speed up the envelope. Clocks slower than 120 BPM will slow it down.

taptempo (tt)

Please see page 23 for details on using taptempo inputs.
shape (sh)

0 0.5 1

0.5

attackshape (as)

0 0.5 1

+

decayshape (ds)

0 0.5 1

swellshape (ss)

0 0.5 1

releaseshape (rs)

0 0.5 1

zerocrossing (z)

DROID manual for blue-6

+
+
+
+

If you use this jack, it sets the shape for all of the relevant phases, which are attack, decay, swell and release. Note:
this input is only effective for those phases where the dedicated input (like attackshape, etc.) is not being used.
Shape of the attack curve. If nothing is patched here, the value of shape will be used. See the general description for
how curve shapes work.
Shape of the curve in the decay phase. If nothing is patched here, the value of shape will be used.
Shape of curve during the swell phase. If nothing is patched here, the value of shape will be used.
Shape of the curve in the release phase. If nothing is patched here, the value of shape will be used.
This is an experimental feature: If you patch the output of an oscillator here, an incoming gate or trigger signal will be
delayed until the next zero crossing of that signal. That allows you to start the envelope exactly when the audio signal
is at 0 and avoid nasty klicks, even if the attack is set to 0. It comes at a price, however. The delay between the trigger
and the ﬁrst zero crossing might vary a lot from note to note and that could make your rhythm untight, especially if
the frequency of the oscillator is low.

170

Table of contents at page 2

